{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/data.ts"],"sourcesContent":["import type { Sale } from '@/lib/types';\n\n// Temporary in-memory store for sales data\nlet sales: Sale[] = [\n  { id: '1', product: 'Laptop', customer: 'Acme Corp', amount: 1200, date: new Date(2024, 5, 15) },\n  { id: '2', product: 'Keyboard', customer: 'Globex Inc', amount: 75, date: new Date(2024, 5, 20) },\n  { id: '3', product: 'Monitor', customer: 'Acme Corp', amount: 300, date: new Date(2024, 6, 1) },\n  { id: '4', product: 'Laptop', customer: 'Stark Industries', amount: 1500, date: new Date(2024, 6, 5) },\n  { id: '5', product: 'Mouse', customer: 'Globex Inc', amount: 25, date: new Date(2024, 6, 10) },\n];\n\n// Simulate fetching data (e.g., from a database)\nexport async function getSales(): Promise<Sale[]> {\n  // In a real app, you'd fetch from a database here\n  await new Promise(resolve => setTimeout(resolve, 50)); // Simulate network delay\n  // Return a deep copy to prevent direct modification of the store\n  return JSON.parse(JSON.stringify(sales)).map((sale: Sale & { date: string }) => ({\n      ...sale,\n      date: new Date(sale.date) // Ensure date is a Date object\n  }));\n}\n\n// Simulate adding data\nexport async function addSale(saleData: Omit<Sale, 'id' | 'date'> & { date: string | Date }): Promise<Sale> {\n  await new Promise(resolve => setTimeout(resolve, 50)); // Simulate network delay\n  const newSale: Sale = {\n    ...saleData,\n    id: String(Date.now()), // Simple unique ID generation\n    date: new Date(saleData.date),\n    amount: Number(saleData.amount) // Ensure amount is a number\n  };\n  sales.push(newSale);\n  // Return a deep copy\n  return JSON.parse(JSON.stringify(newSale));\n}\n\n// In a real application, you would use server actions or API routes\n// to handle data mutations securely on the server.\n"],"names":[],"mappings":";;;;AAEA,2CAA2C;AAC3C,IAAI,QAAgB;IAClB;QAAE,IAAI;QAAK,SAAS;QAAU,UAAU;QAAa,QAAQ;QAAM,MAAM,IAAI,KAAK,MAAM,GAAG;IAAI;IAC/F;QAAE,IAAI;QAAK,SAAS;QAAY,UAAU;QAAc,QAAQ;QAAI,MAAM,IAAI,KAAK,MAAM,GAAG;IAAI;IAChG;QAAE,IAAI;QAAK,SAAS;QAAW,UAAU;QAAa,QAAQ;QAAK,MAAM,IAAI,KAAK,MAAM,GAAG;IAAG;IAC9F;QAAE,IAAI;QAAK,SAAS;QAAU,UAAU;QAAoB,QAAQ;QAAM,MAAM,IAAI,KAAK,MAAM,GAAG;IAAG;IACrG;QAAE,IAAI;QAAK,SAAS;QAAS,UAAU;QAAc,QAAQ;QAAI,MAAM,IAAI,KAAK,MAAM,GAAG;IAAI;CAC9F;AAGM,eAAe;IACpB,kDAAkD;IAClD,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS,MAAM,yBAAyB;IAChF,iEAAiE;IACjE,OAAO,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,QAAQ,GAAG,CAAC,CAAC,OAAkC,CAAC;YAC7E,GAAG,IAAI;YACP,MAAM,IAAI,KAAK,KAAK,IAAI,EAAE,+BAA+B;QAC7D,CAAC;AACH;AAGO,eAAe,QAAQ,QAA6D;IACzF,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS,MAAM,yBAAyB;IAChF,MAAM,UAAgB;QACpB,GAAG,QAAQ;QACX,IAAI,OAAO,KAAK,GAAG;QACnB,MAAM,IAAI,KAAK,SAAS,IAAI;QAC5B,QAAQ,OAAO,SAAS,MAAM,EAAE,4BAA4B;IAC9D;IACA,MAAM,IAAI,CAAC;IACX,qBAAqB;IACrB,OAAO,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC;AACnC,EAEA,oEAAoE;CACpE,mDAAmD","debugId":null}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { addSale } from '@/lib/data';\nimport type { Sale } from '@/lib/types';\nimport { z } from 'zod';\n\n// Define schema matching the form, but expecting ISO date string\nconst saleSchema = z.object({\n  product: z.string().min(2),\n  customer: z.string().min(2),\n  amount: z.coerce.number().positive(),\n  date: z.string().datetime(), // Expect ISO string from client\n});\n\n\nexport async function addSaleAction(formData: Omit<Sale, 'id'> & { date: string }) {\n  // Validate data on the server\n   const validatedData = saleSchema.safeParse(formData);\n\n   if (!validatedData.success) {\n    console.error(\"Server-side validation failed:\", validatedData.error.errors);\n    // In a real app, return specific error messages\n    throw new Error('Invalid sale data submitted.');\n   }\n\n\n  try {\n    // Pass validated data to the data layer function\n    await addSale(validatedData.data);\n    revalidatePath('/'); // Revalidate the home page to show the new sale\n    return { success: true, message: \"Sale added successfully\" };\n  } catch (error) {\n    console.error('Error adding sale:', error);\n     // You might want to throw a more specific error or return an error object\n    throw new Error('Failed to add sale due to a server error.');\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;;;;;;;AAEA,iEAAiE;AACjE,MAAM,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1B,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IACxB,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IACzB,QAAQ,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC,MAAM,GAAG,QAAQ;IAClC,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAC3B;AAGO,eAAe,uCAAW,GAAX,cAAc,QAA6C;IAC/E,8BAA8B;IAC7B,MAAM,gBAAgB,WAAW,SAAS,CAAC;IAE3C,IAAI,CAAC,cAAc,OAAO,EAAE;QAC3B,QAAQ,KAAK,CAAC,kCAAkC,cAAc,KAAK,CAAC,MAAM;QAC1E,gDAAgD;QAChD,MAAM,IAAI,MAAM;IACjB;IAGD,IAAI;QACF,iDAAiD;QACjD,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAO,AAAD,EAAE,cAAc,IAAI;QAChC,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,gDAAgD;QACrE,OAAO;YAAE,SAAS;YAAM,SAAS;QAA0B;IAC7D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sBAAsB;QACnC,0EAA0E;QAC3E,MAAM,IAAI,MAAM;IAClB;AACF;;;IArBsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/sales-dashboard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const SalesDashboard = registerClientReference(\n    function() { throw new Error(\"Attempted to call SalesDashboard() from the server but SalesDashboard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/sales-dashboard.tsx <module evaluation>\",\n    \"SalesDashboard\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,iBAAiB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,oEACA","debugId":null}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/sales-dashboard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const SalesDashboard = registerClientReference(\n    function() { throw new Error(\"Attempted to call SalesDashboard() from the server but SalesDashboard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/sales-dashboard.tsx\",\n    \"SalesDashboard\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,iBAAiB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,gDACA","debugId":null}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/sales-input-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const SalesInputForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call SalesInputForm() from the server but SalesInputForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/sales-input-form.tsx <module evaluation>\",\n    \"SalesInputForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,iBAAiB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,qEACA","debugId":null}},
    {"offset": {"line": 234, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/sales-input-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const SalesInputForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call SalesInputForm() from the server but SalesInputForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/sales-input-form.tsx\",\n    \"SalesInputForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,iBAAiB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAChD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,iDACA","debugId":null}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 258, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n  </div>\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  >\n    {children}\n  </div>\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n  </div>\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  >\n    {children}\n  </div>\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props}>\n    {children}\n  </div>\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  >\n    {children}\n  </div>\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;kBAER;;;;;;AAGL,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;kBAER;;;;;;AAGL,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;kBAER;;;;;;AAGL,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;kBAER;;;;;;AAGL,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;kBAC3D;;;;;;AAGL,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;kBAER;;;;;;AAGL,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 345, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["import { SalesDashboard } from '@/components/sales-dashboard';\nimport { SalesInputForm } from '@/components/sales-input-form';\nimport { getSales } from '@/lib/data';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default async function Home() {\n  const initialSales = await getSales();\n\n  return (\n    <main className=\"flex min-h-screen flex-col items-center p-4 md:p-8 lg:p-12 bg-secondary\">\n      <div className=\"w-full max-w-6xl space-y-8\">\n        <h1 className=\"text-3xl font-bold text-center text-primary\">Sales Tracker</h1>\n\n        <Card className=\"shadow-md\">\n          <CardHeader>\n            <CardTitle>Add New Sale</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <SalesInputForm />\n          </CardContent>\n        </Card>\n\n        <SalesDashboard initialSales={initialSales} />\n\n      </div>\n    </main>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;;AAEe,eAAe;IAC5B,MAAM,eAAe,MAAM,CAAA,GAAA,kHAAA,CAAA,WAAQ,AAAD;IAElC,qBACE,8OAAC;QAAK,WAAU;kBACd,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAG,WAAU;8BAA8C;;;;;;8BAE5D,8OAAC,gIAAA,CAAA,OAAI;oBAAC,WAAU;;sCACd,8OAAC,gIAAA,CAAA,aAAU;sCACT,cAAA,8OAAC,gIAAA,CAAA,YAAS;0CAAC;;;;;;;;;;;sCAEb,8OAAC,gIAAA,CAAA,cAAW;sCACV,cAAA,8OAAC,4IAAA,CAAA,iBAAc;;;;;;;;;;;;;;;;8BAInB,8OAAC,wIAAA,CAAA,iBAAc;oBAAC,cAAc;;;;;;;;;;;;;;;;;AAKtC","debugId":null}}]
}